version: '3.8'

services:
  # База данных для Django
  db:
    container_name: foodgram-db
    image: postgres:13
    env_file:
      - ../.env                 # <-- здесь ваши POSTGRES_… переменные
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Django-бэкенд
  backend:
    container_name: foodgram-back
    build:
      context: ../backend       # <-- путь к папке с backend/Dockerfile
      dockerfile: Dockerfile
    env_file:
      - ../.env                 # <-- DJANGO_DEBUG, POSTGRES_… и т.д.
    ports:
      - "8000:8000"
    depends_on:
      - db
    # убрали volume, который перезаписывал код:
    # volumes:
    #   - ../backend/:/app/

  # React-фронтенд — собираем в volume, который потом использует nginx
  frontend:
    container_name: foodgram-front
    build:
      context: ../frontend     # <-- путь к папке с frontend/Dockerfile
      dockerfile: Dockerfile
    command: sh -c "npm install --legacy-peer-deps && npm run build"
    volumes:
      - frontend_build:/app/build   # <-- общий volume с nginx
    depends_on:
      - backend

  # Nginx — отдаёт фронтенд и проксирует API/админку
  nginx:
    container_name: foodgram-proxy
    image: nginx:1.25.4-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro   # <-- ваш конфиг
      - frontend_build:/usr/share/nginx/html:ro          # <-- статика React
      - media_volume:/vol/media                          # <-- медиа Django
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  media_volume:
  frontend_build:
